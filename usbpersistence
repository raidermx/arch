criar usb live com persistencia para gravar suas configurações após o boot

fonte: https://www.kali.org/docs/usb/
fonte:https://www.kali.org/docs/usb/live-usb-install-with-linux/

Making a Kali Bootable USB Drive (Linux)
Table of Contents
Our favourite way, and the fastest method, for getting up and running with Kali Linux is to run it “live” from a USB drive. This method has several advantages:

It’s non-destructive - it makes no changes to the host system’s hard drive or installed OS, and to go back to normal operations, you simply remove the “Kali Live” USB drive and restart the system.
It’s portable - you can carry Kali Linux in your pocket and have it running in minutes on an available system
It’s customizable - you can roll your own custom Kali Linux ISO image and put it onto a USB drive using the same procedures
It’s potentially persistent - with a bit of extra effort, you can configure your Kali Linux “live” USB drive to have persistent storage, so the data you collect is saved across reboots
In order to do this, we first need to create a bootable USB drive which has been set up from an ISO image of Kali Linux.

What You’ll Need
A verified copy of the appropriate ISO image of the latest Kali build image for the system you’ll be running it on: see the details on downloading official Kali Linux images.

If you’re running under Linux, you can use the dd command, which is pre-installed, or use Etcher.

A USB thumb drive, 4GB or larger. (Systems with a direct SD card slot can use an SD card with similar capacity. The procedure is identical.)

Kali Linux Live USB Install Procedure
The specifics of this procedure will vary depending on whether you’re doing it on a Windows, Linux, or macOS/OS X system.

Creating a Bootable Kali USB Drive on Linux (DD)
Creating a bootable Kali Linux USB drive in a Linux environment is easy. Once you’ve downloaded and verified your Kali ISO file, you can use the dd command to copy it over to your USB drive using the following procedure. Note that you’ll need to be running as root, or to execute the dd command with sudo. The following example assumes a Linux Mint 17.1 desktop - depending on the distro you’re using, a few specifics may vary slightly, but the general idea should be very similar. If you would prefer to use Etcher, then follow the same directions as a Windows user. Note that the USB drive will have a path similar to /dev/sdb.

WARNING: Although the process of imaging Kali Linux onto a USB drive is very easy, you can just as easily overwrite a disk drive you didn’t intend to with dd if you do not understand what you are doing, or if you specify an incorrect output path. Double-check what you’re doing before you do it, it’ll be too late afterwards.

Consider yourself warned.

First, you’ll need to identify the device path to use to write the image to your USB drive. Without the USB drive inserted into a port, execute the command sudo fdisk -l at a command prompt in a terminal window (if you don’t use elevated privileges with fdisk, you won’t get any output). You’ll get output that will look something (not exactly) like this, showing a single drive - “/dev/sda” - containing three partitions (/dev/sda1, /dev/sda2, and /dev/sda5):


2. Now, plug your USB drive into an available USB port on your system, and run the same command, “sudo fdisk -l” a second time. Now, the output will look something (again, not exactly) like this, showing an additional device which wasn’t there previously, in this example “/dev/sdb”, a 16GB USB drive:


3. Proceed to (carefully!) image the Kali ISO file on the USB device. The example command below assumes that the ISO image you’re writing is named “kali-linux-2023.2-live-amd64.iso” and is in your current working directory. The blocksize parameter can be increased, and while it may speed up the operation of the dd command, it can occasionally produce unbootable USB drives, depending on your system and a lot of different factors. The recommended value, “bs=4M”, is conservative and reliable. Additionally, the parameter “conv=fsync” makes sure that the data is physically written to the USB drives before the commands returns:
kali@kali:~$ dd if=kali-linux-2023.2-live-amd64.iso of=/dev/sdb conv=fsync bs=4M
Imaging the USB drive can take a good amount of time, over ten minutes or more is not unusual, as the sample output below shows. Be patient!

The dd command provides no feedback until it’s completed, but if your drive has an access indicator, you’ll probably see it flickering from time to time. The time to dd the image across will depend on the speed of the system used, USB drive itself, and USB port it’s inserted into. Once dd has finished imaging the drive, it will output something that looks like this:

893+1 records in
893+1 records out
3748147200 bytes (3.7 GB, 3.5 GiB) copied, 998.442 s, 3.8 MB/s
That’s it, really!

Creating a Bootable Kali USB Drive on Linux (DD with status)
Alternatively there are a few other options available for imaging.

The first option is dd with a status indicator. This is only available on newer systems however. To do this, we simply add the status flag:

kali@kali:~$ dd if=kali-linux-2023.2-live-amd64.iso of=/dev/sdb conv=fsync bs=4M status=progress
Another option is to use pv. We can also use the size flag here to get an approximate timer. Change the size depending on the image being used:

kali@kali:~$ dd if=kali-linux-2023.2-live-amd64.iso | pv -s 2.8G | dd of=/dev/sdb conv=fsync bs=4M
Creating a Bootable Kali USB Drive on Linux (Etcher)
The third is Etcher.

Download and run Etcher.

Choose the Kali Linux ISO file to be imaged with “select image” and verify that the USB drive to be overwritten is the correct one. Click the “Flash!” button once ready.



3. Once Etcher alerts you that the image has been flashed, you can safely remove the USB drive.
You can now boot into a Kali Live / Installer environment using the USB device.



fonte: https://www.kali.org/docs/usb/live-usb-install-with-windows/

Creating a Bootable Kali USB Drive on Windows (Rufus)
Plug your USB drive into an available USB port on your Windows PC, note which 
drive designator (e.g. “G:\”) it uses once it mounts, and launch Rufus.

With Device, check the dropdown list of options for the USB drive (e.g. “G:\” and size).

Boot selection needs to point to point to the Kali Linux ISO file, which can be done by clicking the SELECT button

Depending on your configuration, you can set the Partition scheme, as well as Target system. If you are not sure, 
leave it as the default values.

While you can easily create a persistent live usb with the integrated options in Rufus by increasing the
persistence slider, this is not the officially supported method 
(check Adding Persistence to a Kali Linux Live USB Drive), as it doesn’t work for all images, 
like the Kali Everything Live ISO introduced in release 2022.1.

Click the START button once ready.


6. You may get a prompt saying about ISOHybird image. Selecting ISO image, will allow you to edit the 
files from the Kali Linux ISO, but at the potential lose of hardware compatibility. As a result, we 
recommend selecting DD Image.


Note: If you select “DD Image” option, you can create another partition on the USB drive, allowing 
you to use the rest of the space. 
Start -> Run (Windows + R) -> diskmgmt.msc -> Locate the USB drive -> Right-click in “Unallocated” -> 
New Simple Volume -> Follow the rest of the wizard with next, next, next…



Booting A USB Drive In Windows
Depending on the system (such as BIOS or UEFI), as well as the version of Windows, 
and how they are each configured, you may need to re-image the USB drive.

Master Boot Record (MBR) is often used on legacy systems that use BIOS as well as UEFI which has 
Compatibility Support Module (CSM) enabled
GUID Partition Table (GPT) is required where UEFI has CSM disabled, forcing to use the modern standard
After writing the image to the USB drive, reboot Windows with the USB inserted. 
Depending on the motherboard manufacture, will also depend on the next stage. 
Some motherboard’s support a “temporary” boot menu, allowing for a one off selection. 
Others you need to enter BIOS/UEFI to configure it to try and boot from USB first. 
Entering either location, also depends on the motherboard. You can look up on the manufactures 
website and read the manual, try and read the screen when 
booting (however the text may be shown too quick or full logos used), 
or try common key combinations (such as ESC, F1, F2, F3, F4, F8, F10, F11, F12 or DEL).


fonte: https://www.kali.org/docs/usb/usb-persistence/
Adding Persistence to a Kali Linux Live USB Drive
Kali Linux “Live” has two options in the default boot menu which enable persistence - the preservation of data on the “Kali Live” USB drive - across reboots of “Kali Live”. This can be an extremely useful enhancement, and enables you to retain documents, collected testing results, configurations, etc., when running Kali Linux “Live” from the USB drive, even across different systems. The persistent data is stored in its own partition on the USB drive, which can also be optionally LUKS-encrypted.

To make use of the USB persistence options at boot time, you’ll need to do some additional setup on your “Kali Linux Live” USB drive; this article will show you how.

This guide assumes that you have already created a Kali Linux “Live” USB drive as described in the doc page for that subject. For the purposes of this article, we’ll assume you’re working on a Linux-based system.



You’ll need to have root privileges to do this procedure, or the ability to escalate your privileges with sudo.

In this example, we assume:

your USB drive is /dev/sdb (last letter will probably be different). Check the connected usb drives with the command lsblk and modify the device name in the usb variable before running the commands)
your USB drive has a capacity of at least 8GB - the Kali Linux image takes over 3GB, and for this guide, we’ll be creating a new partition of about 4GB to store our persistent data in
In this example, we’ll create a new partition to store our persistent data into, starting right above the second Kali Live partition, put an ext4 file system onto it, and create a persistence.conf file on the new partition.

First, begin by imaging the latest Kali Linux ISO (currently 2023.2) to your USB drive as described in this article. We’re going to assume that the two partitions created by the imaging are /dev/sdb1 and /dev/sdb2. This can be verified with the command lsblk.

Create and format an additional partition on the USB drive. First, let’s create the new partition in the empty space above our Kali Live partitions. We have to do this from the command line as gparted will read the imaged ISO as a large block:

kali@kali:~$ usb=/dev/sdb
kali@kali:~$
kali@kali:~$ sudo fdisk $usb <<< $(printf "n\np\n\n\n\nw")
When fdisk completes, the new partition should have been created at /dev/sdb3; again, this can be verified with the command lsblk.

Next, create an ext4 file system in the partition and label it persistence:
kali@kali:~$ usb=/dev/sdb
kali@kali:~$
kali@kali:~$ sudo mkfs.ext4 -L persistence ${usb}3
Create a mount point, mount the new partition there, and then create the configuration file to enable persistence. Finally, unmount the partition:
kali@kali:~$ usb=/dev/sdb
kali@kali:~$
kali@kali:~$ sudo mkdir -p /mnt/my_usb
kali@kali:~$ sudo mount ${usb}3 /mnt/my_usb
kali@kali:~$ echo "/ union" | sudo tee /mnt/my_usb/persistence.conf
kali@kali:~$ sudo umount ${usb}3
We can now reboot into “Live USB Persistance.” Keep in mind we will need to select this boot option every time we wish to have our work stored.

fonte: https://www.kali.org/docs/usb/usb-persistence-encryption/

Adding Encrypted Persistence to a Kali Linux Live USB Drive

Multiple Persistence Stores
Emergency Self Destruction of Data in Kali

In this workshop, we will examine the various features available to us when booting Kali Linux from USB devices. We will explore features such as persistence, creating LUKS encrypted persistence stores, and even dabble in “LUKS Nuking” our USB drive. The default Kali Linux ISOs (from 1.0.7 onwards) support USB encrypted persistence.

0x01 - Start by imaging the Kali ISO onto your USB drive (ours was /dev/sdb). Once done, you can inspect the USB partition structure using parted /dev/sdb print:

For ease of use, please use a root account. This can be done with “sudo su”.

kali@kali:~$ dd if=kali-linux-2023.2-live-amd64.iso of=/dev/sdb conv=fsync bs=4M
0x02 - Create and format an additional partition on the USB drive. In our example, we create a persistent partition in the empty space above the Kali Live partitions:

kali@kali:~$ fdisk /dev/sdb <<< $(printf "n\np\n\n\n\nw")
When fdisk completes, the new partition should have been created at /dev/sdb3; this can be verified with the command lsblk.

0x03 - Encrypt the partition with LUKS:

kali@kali:~$ cryptsetup --verbose --verify-passphrase luksFormat /dev/sdb3
0x04 - Open the encrypted partition:

kali@kali:~$ cryptsetup luksOpen /dev/sdb3 my_usb
0x05 - Create an ext4 filesystem and label it:

kali@kali:~$ mkfs.ext4 -L persistence /dev/mapper/my_usb
kali@kali:~$ e2label /dev/mapper/my_usb persistence
0x06 - Mount the partition and create your persistence.conf so changes persist across reboots:

kali@kali:~$ mkdir -p /mnt/my_usb
kali@kali:~$ mount /dev/mapper/my_usb /mnt/my_usb
kali@kali:~$ echo "/ union" | sudo tee /mnt/my_usb/persistence.conf
kali@kali:~$ umount /dev/mapper/my_usb
0x07 - Close the encrypted partition:

kali@kali:~$ cryptsetup luksClose /dev/mapper/my_usb
Now your USB drive is ready to plug in and reboot into Live USB Encrypted Persistence mode.

Multiple Persistence Stores
At this point we should have the following partition structure:

kali@kali:~$ parted /dev/sdb print
We can add additional persistence stores to the USB drive, both encrypted or not… and choose which persistence store we want to load, at boot time. Let’s create one more additional non-encrypted store. We’ll label and call it “work”.

0x01 - Create an additional, 4th partition which will hold the “work” data. We’ll give it another 5GB of space:

kali@kali:~$ parted /dev/sdb
GNU Parted 2.3
Using /dev/sdb
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Model: SanDisk SanDisk Ultra (scsi)
Disk /dev/sdb: 31.6GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system  Flags
 1      32.8kB  2988MB  2988MB  primary               boot, hidden
 2      2988MB  3050MB  64.9MB  primary  fat16
 3      3050MB  10.0GB  6947MB  primary

(parted) mkpart primary 10000 15000
(parted) quit
Information: You may need to update /etc/fstab.
0x02 - Format the fourth partition, label it “work”:

kali@kali:~$ mkfs.ext4 /dev/sdb4
kali@kali:~$ e2label /dev/sdb4 work
0x03 - Mount this new partition and create a persistence.conf in it:

kali@kali:~$ mkdir -p /mnt/usb
kali@kali:~$ mount /dev/sdb4 /mnt/usb
kali@kali:~$ echo "/ union" > /mnt/usb/persistence.conf
kali@kali:~$ umount /mnt/usb
Boot the computer, and set it to boot from USB. When the boot menu appears, edit the persistence-label parameter to point to your preferred persistence store!

Emergency Self Destruction of Data in Kali
As penetration testers, we often need to travel with sensitive data stored on our laptops. Of course, we use full disk encryption wherever possible, including our Kali Linux machines, which tend to contain the most sensitive materials. Let’s configure a nuke password as a safety measure:

kali@kali:~$ sudo apt install -y cryptsetup-nuke-password
kali@kali:~$ dpkg-reconfigure cryptsetup-nuke-password
The configured nuke password will be stored in the initrd and will be usable with all encrypted partitions that you can unlock at boot time.

Backup you LUKS keyslots and encrypt them:

kali@kali:~$ cryptsetup luksHeaderBackup --header-backup-file luksheader.back /dev/sdb3
kali@kali:~$ openssl enc -e -aes-256-cbc -in luksheader.back -out luksheader.back.enc
Now boot into your encrypted store, and give the Nuke password, rather than the real decryption password. This will render any info on the encrypted store useless. Once this is done, verify that the data is indeed inacessible.

Lets restore the data now. We’ll decrypt our backup of the LUKS keyslots, and restore them to the encrypted partition:

kali@kali:~$ openssl enc -d -aes-256-cbc -in luksheader.back.enc -out luksheader.back
kali@kali:~$ cryptsetup luksHeaderRestore --header-backup-file luksheader.back /dev/sdb3
Our slots are now restored. All we have to do is simply reboot and provide our normal LUKS password and the system is back to its original state.

